/***********************************Requirement description**********************************************/
// â€¢	There is a bookstore that has different branches, each of them sell a number of books, these books are supplied by the Supplier. 
// â€¢	A bookstore shouldnâ€™t sell a book when the number of books is 0, it should block and notify the Supplier to provide more
// â€¢	A supplier shouldnâ€™t provide a book when the max count of books is reached, when it provides a book, it should tell stores that there are more books available.
// â€¢	Modify the requirement_student.java code to reflect this behaviour.
// â€¢	All threads should execute in parallel, you cannot allow a thread to stop another thread (should guarantee progress)
// â€¢	Follow the 8 TODOs in the Code
 /***********************************************************************************************/


class Threadsrequirement {
	 public static void main(String... args) throws InterruptedException {
	 	BookStock b = new BookStock (10);
		
		//TODO-1: Create 4 threads,
		// 1 for Supplier
		// 3 for StoreBranches and Name them as the following: Giza branch, Cairo branch, Daqahley branch
	 	

		//TODO-2: Run the 4 threads
    }
}

class BookStock {
	private int book_count;
	private int max;
	public BookStock  (int max) {
		this.max = max;
	}
	public void produce() {
		book_count++;
	}

	public void consume () {
		book_count--;
	}

	public int getCount () {
		return book_count;
	}
}

//TODO-3: should it implement or extend anything?
class Supplier {
	private BookStock b;

	public Supplier (BookStock b) {
		this.b = b;
	}
//TODO-4:is a function missing ?
	public void doWork () {
		while (true) {
	//TODO-5: how to make it stop producing when it reaches max, without adding extra sleeps or busy waiting ?
			b.produce();
			System.out.println (Thread.currentThread().getName() + " provided a book, total " +b.getCount());
			try {
				Thread.sleep (1000);
			} catch (InterruptedException e) {
				System.out.println (Thread.currentThread().getName() + "is awaken");
			}
        }
	}

}

//TODO-6: should it implement or extend anything?
class StoreBranch {
	private BookStock b;

	public StoreBranch (BookStock b) {
		this.b = b;
	}

//TODO-7: is a function missing ?
	public void doWork () {
		while (true) {
		//TODO-8: how to make it stop consuming when the store is empty, without adding extra sleeps or busy waiting ?
			b.consume();
			System.out.println (Thread.currentThread().getName() + " sold a book");
			try {
				Thread.sleep (2000);
			} catch (InterruptedException e) {
				System.out.println (Thread.currentThread().getName() + "is awaken");
			}
        }
	}
}